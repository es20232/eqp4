{"ast":null,"code":"import axios from 'axios';\nexport const uploadPost = (image, description) => async dispatch => {\n  try {\n    // Obter a autorização do sessionStorage\n    const authorization = sessionStorage.getItem('authorization');\n    console.log(authorization);\n    // Verificar se a autorização está presente\n    if (!authorization) {\n      throw new Error('Autorização não encontrada');\n    }\n\n    // Configurar os cabeçalhos da requisição com a autorização\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        'Authorization': authorization\n      }\n    };\n\n    // Criar um objeto FormData para enviar os dados do formulário\n    const formData = new FormData();\n    formData.append('image', image);\n    formData.append('description', description);\n\n    // Enviar a requisição POST para o endpoint de upload de post\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}posts/`, formData, config);\n\n    // Despachar uma ação de sucesso com os dados do post\n    dispatch({\n      type: 'UPLOAD_POST_SUCCESS',\n      payload: res.data\n    });\n  } catch (error) {\n    // Se ocorrer um erro, despachar uma ação de falha com a mensagem de erro\n    dispatch({\n      type: 'UPLOAD_POST_FAIL',\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"names":["axios","uploadPost","image","description","dispatch","authorization","sessionStorage","getItem","console","log","Error","config","headers","formData","FormData","append","res","post","process","env","REACT_APP_API_URL","type","payload","data","error","message"],"sources":["C:/Users/guigi/OneDrive/Documentos/GitHub/eqp4-final/tigrim/frontend/src/actions/postActions.jsx"],"sourcesContent":["import axios from 'axios'; \r\n\r\nexport const uploadPost = (image, description) => async (dispatch) => {\r\n  try {\r\n    \r\n    // Obter a autorização do sessionStorage\r\n    const authorization = sessionStorage.getItem('authorization');\r\n    console.log(authorization)\r\n    // Verificar se a autorização está presente\r\n    if (!authorization) {\r\n      throw new Error('Autorização não encontrada');\r\n    }\r\n\r\n    // Configurar os cabeçalhos da requisição com a autorização\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n        'Authorization': authorization,\r\n      },\r\n    };\r\n\r\n    // Criar um objeto FormData para enviar os dados do formulário\r\n    const formData = new FormData();\r\n    formData.append('image', image);\r\n    formData.append('description', description);\r\n\r\n    // Enviar a requisição POST para o endpoint de upload de post\r\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}posts/`, formData, config);\r\n\r\n    // Despachar uma ação de sucesso com os dados do post\r\n    dispatch({ type: 'UPLOAD_POST_SUCCESS', payload: res.data });\r\n  } catch (error) {\r\n    // Se ocorrer um erro, despachar uma ação de falha com a mensagem de erro\r\n    dispatch({ type: 'UPLOAD_POST_FAIL', payload: error.message });\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,UAAU,GAAGA,CAACC,KAAK,EAAEC,WAAW,KAAK,MAAOC,QAAQ,IAAK;EACpE,IAAI;IAEF;IACA,MAAMC,aAAa,GAAGC,cAAc,CAACC,OAAO,CAAC,eAAe,CAAC;IAC7DC,OAAO,CAACC,GAAG,CAACJ,aAAa,CAAC;IAC1B;IACA,IAAI,CAACA,aAAa,EAAE;MAClB,MAAM,IAAIK,KAAK,CAAC,4BAA4B,CAAC;IAC/C;;IAEA;IACA,MAAMC,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,qBAAqB;QACrC,eAAe,EAAEP;MACnB;IACF,CAAC;;IAED;IACA,MAAMQ,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEb,KAAK,CAAC;IAC/BW,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEZ,WAAW,CAAC;;IAE3C;IACA,MAAMa,GAAG,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,QAAO,EAAEP,QAAQ,EAAEF,MAAM,CAAC;;IAExF;IACAP,QAAQ,CAAC;MAAEiB,IAAI,EAAE,qBAAqB;MAAEC,OAAO,EAAEN,GAAG,CAACO;IAAK,CAAC,CAAC;EAC9D,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACApB,QAAQ,CAAC;MAAEiB,IAAI,EAAE,kBAAkB;MAAEC,OAAO,EAAEE,KAAK,CAACC;IAAQ,CAAC,CAAC;EAChE;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}